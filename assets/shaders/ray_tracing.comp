#version 450

#define PI 3.1415926
#define FLT_MAX 3.402823466e+38

layout(local_size_x = 16, local_size_y = 16) in;
layout(set = 0, binding = 0, rgba8) uniform image2D resultImage;

layout(set = 1, binding = 0) uniform UniformBufferObject {
  mat4 view;
  mat4 projection;
  vec4 viewportSize;
  vec4 cameraPosition;
  vec4 renderSettings;
  vec4 frame;
  vec4 groundColour;
  vec4 skyColourHorizon;
  vec4 skyColourZenith;
  vec4 sunPosition;
  float sunFocus;
  float sunInternsity;
  float defocusStrength;
  float divergeStrength;
}
ubo;

struct Ray {
  vec3 origin;
  vec3 dir;
};

struct RayTracingMaterial {
  vec3 colour;
  vec3 emissionColour;
  float emissionStrength;
  float smoothness;
  float specularProbability;
  vec3 specularColour;
};

struct HitInfo {
  bool didHit;
  float dst;
  vec3 hitPoint;
  vec3 normal;
  RayTracingMaterial material;
};

struct Sphere {
  vec3 position;
  float radius;
  RayTracingMaterial material;
};

uint nextRandom(inout uint state);
float randomValue(inout uint state);
float randomValueNormalDistribution(inout uint state);
vec3 randomDirection(inout uint state);
vec2 randomPointInCircle(inout uint rngState);
vec3 randomHemisphereDirection(vec3 normal, inout uint rngState);

HitInfo raySphere(Ray ray, vec3 sphereCentre, float sphereRadius);
HitInfo calculateRayCollision(Ray ray);
vec3 trace(Ray ray, inout uint rngState);
vec3 screenToWorldDirection(vec2 point);
vec3 getEnvironmentLight(Ray ray);
float linearToGamma(float linearComponent);

#define NUM_SPHERES 3
Sphere spheres[NUM_SPHERES];

void main() {
  int index = 0;
  spheres[index].position = vec3(0, 0, -5);
  spheres[index].radius = 1.0;
  spheres[index].material.colour = vec3(0.5, 0.5, 0.5);
  spheres[index].material.emissionColour = vec3(0);
  spheres[index].material.emissionStrength = 0;
  spheres[index].material.smoothness = 1.0;
  spheres[index].material.specularProbability = 0.5;
  spheres[index].material.specularColour = vec3(1.0);

  index = 1;
  spheres[index].position = vec3(3, 0, -5);
  spheres[index].radius = 1.0;
  spheres[index].material.colour = vec3(0.8, 0.2, 0.2);
  spheres[index].material.emissionColour = vec3(0);
  spheres[index].material.emissionStrength = 0;
  spheres[index].material.smoothness = 0.5;
  spheres[index].material.specularProbability = 0.0;
  spheres[index].material.specularColour = vec3(1.0);

  index = 2;
  spheres[index].position = vec3(0, -101, -5);
  spheres[index].radius = 100.0;
  spheres[index].material.colour = vec3(0.2, 0.8, 0.05);
  spheres[index].material.emissionColour = vec3(0);
  spheres[index].material.emissionStrength = 0;
  spheres[index].material.smoothness = 0.0;
  spheres[index].material.specularProbability = 0.0;
  spheres[index].material.specularColour = vec3(1.0);

  ivec2 imageSize = imageSize(resultImage);
  vec2 uv = vec2(gl_GlobalInvocationID.xy) / imageSize;

  float aspectRatio = float(imageSize.x) / float(imageSize.y);

  uint pixelIndex =
      gl_GlobalInvocationID.x * imageSize.x + gl_GlobalInvocationID.y;
  uint rngState = pixelIndex + int(ubo.frame.x) * 719393;

  vec3 totalIncomingLight = vec3(0.0);
  for (int rayIndex = 0; rayIndex < ubo.renderSettings.x; rayIndex++) {
    Ray ray;
    vec2 defocusJitter =
        randomPointInCircle(rngState) * ubo.defocusStrength / imageSize.x;
    ray.origin = ubo.cameraPosition.xyz + vec3(defocusJitter / imageSize, 0.0);
    vec2 jitter =
        randomPointInCircle(rngState) * ubo.divergeStrength / imageSize.x;
    ray.dir =
        screenToWorldDirection(gl_GlobalInvocationID.xy) + vec3(jitter, 0.0);

    totalIncomingLight += trace(ray, rngState);
  }

  vec3 pixelColor = totalIncomingLight / ubo.renderSettings.x;
  pixelColor.x = linearToGamma(pixelColor.x);
  pixelColor.y = linearToGamma(pixelColor.y);
  pixelColor.z = linearToGamma(pixelColor.z);

  vec4 oldRender =
      vec4(imageLoad(resultImage, ivec2(gl_GlobalInvocationID.xy)).xyz, 1.0);
  vec4 newRender = vec4(pixelColor, 1.0);
  float weight = 1.0 / (ubo.frame.x + 1);
  vec4 accumulatedAverage = oldRender * (1 - weight) + newRender * weight;

  imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), accumulatedAverage);
}

uint nextRandom(inout uint state) {
  state = state * 747796405 + 2891336453;
  uint result = ((state >> ((state >> 28) + 4)) ^ state) * 277803737;
  result = (result >> 22) ^ result;
  return result;
}

float randomValue(inout uint state) { return nextRandom(state) / 4294967295.0; }

float randomValueNormalDistribution(inout uint state) {
  float theta = 2 * 3.1415926 * randomValue(state);
  float rho = sqrt(-2 * log(randomValue(state)));
  return rho * cos(theta);
}

vec3 randomDirection(inout uint state) {
  float x = randomValueNormalDistribution(state);
  float y = randomValueNormalDistribution(state);
  float z = randomValueNormalDistribution(state);
  return normalize(vec3(x, y, z));
}

vec2 randomPointInCircle(inout uint rngState) {
  float angle = randomValue(rngState) * 2 * PI;
  vec2 pointOnCircle = vec2(cos(angle), sin(angle));
  return pointOnCircle * sqrt(randomValue(rngState));
}

vec3 randomHemisphereDirection(vec3 normal, inout uint rngState) {
  vec3 dir = randomDirection(rngState);
  return dir * sign(dot(normal, dir));
}

HitInfo raySphere(Ray ray, vec3 sphereCentre, float sphereRadius) {
  HitInfo hitInfo;
  hitInfo.didHit = false;
  hitInfo.dst = 0;
  hitInfo.hitPoint = vec3(0.0);
  hitInfo.normal = vec3(0.0);

  vec3 offsetRayOrigin = ray.origin - sphereCentre;
  float a = dot(ray.dir, ray.dir);
  float b = 2 * dot(offsetRayOrigin, ray.dir);
  float c = dot(offsetRayOrigin, offsetRayOrigin) - sphereRadius * sphereRadius;
  float discrimintant = b * b - 4 * a * c;

  if (discrimintant >= 0) {
    float dst = (-b - sqrt(discrimintant)) / (2 * a);

    if (dst >= 0) {
      hitInfo.didHit = true;
      hitInfo.dst = dst;
      hitInfo.hitPoint = ray.origin + ray.dir * dst;
      hitInfo.normal = normalize(hitInfo.hitPoint - sphereCentre);
    }
  }

  return hitInfo;
}

HitInfo calculateRayCollision(Ray ray) {
  HitInfo closestHit;
  closestHit.didHit = false;
  closestHit.hitPoint = vec3(0.0);
  closestHit.normal = vec3(0.0);
  closestHit.dst = FLT_MAX;

  for (int i = 0; i < NUM_SPHERES; i++) {
    Sphere sphere = spheres[i];
    HitInfo hitInfo = raySphere(ray, sphere.position, sphere.radius);

    if (hitInfo.didHit && hitInfo.dst < closestHit.dst) {
      closestHit = hitInfo;
      closestHit.material = sphere.material;
    }
  }

  return closestHit;
}

vec3 trace(Ray ray, inout uint rngState) {
  vec3 incomingLight = vec3(0.0);
  vec3 rayColour = vec3(1.0);

  for (int i = 0; i < ubo.renderSettings.y; i++) {
    HitInfo hitInfo = calculateRayCollision(ray);
    if (hitInfo.didHit) {
      RayTracingMaterial material = hitInfo.material;

      ray.origin = hitInfo.hitPoint;
      vec3 diffuseDir = normalize(hitInfo.normal + randomDirection(rngState));
      vec3 specularDir = reflect(ray.dir, hitInfo.normal);
      bool isSpecularBounce =
          material.specularProbability >= randomValue(rngState);
      ray.dir = mix(diffuseDir, specularDir,
                    material.smoothness * int(isSpecularBounce));

      vec3 emittedLight = material.emissionColour * material.emissionStrength;
      incomingLight += emittedLight * rayColour;
      rayColour *=
          mix(material.colour, material.specularColour, int(isSpecularBounce));
    } else {
      /* TODO: better background colour */
      incomingLight += getEnvironmentLight(ray) * rayColour;
      break;
    }
  }

  return incomingLight;
}

vec3 screenToWorldDirection(vec2 point) {
  vec3 ndc = vec3((2.0f * point.x) / ubo.viewportSize.x - 1.0f,
                  (2.0f * point.y) / ubo.viewportSize.y - 1.0f, 1.0f);

  vec4 clip = vec4(ndc.x, ndc.y, -1.0f, 1.0f);

  vec4 eye = inverse(ubo.projection) * clip;
  eye = vec4(eye.x, eye.y, -1.0f, 0.0f);

  vec3 world = vec3(inverse(ubo.view) * eye);
  world = normalize(world);

  return world;
}

vec3 getEnvironmentLight(Ray ray) {
  float skyGradientT = pow(smoothstep(0, 0.4, ray.dir.y), 0.35);
  float groundToSkyT = smoothstep(-0.01, 0, ray.dir.y);
  vec3 skyGradient =
      mix(ubo.skyColourHorizon.xyz, ubo.skyColourZenith.xyz, skyGradientT);
  float sun = pow(max(0, dot(ray.dir, ubo.sunPosition.xyz)), ubo.sunFocus) *
              ubo.sunInternsity;
  vec3 composite = mix(ubo.groundColour.xyz, skyGradient, groundToSkyT) +
                   sun * int(groundToSkyT >= 1);

  return composite;
}

float linearToGamma(float linearComponent) { return sqrt(linearComponent); }